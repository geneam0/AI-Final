{"version":3,"sources":["logo.svg","App.js","reportWebVitals.js","index.js"],"names":["App","passageRef","useRef","questionRef","useState","answer","setAnswer","model","setModel","loadModel","a","qna","loadedModel","console","log","answerQuestion","e","which","passage","current","value","question","findAnswers","answers","useEffect","className","type","color","height","width","Fragment","ref","rows","cols","onKeyPress","size","map","ans","idx","text","Math","floor","score","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6UAAe,I,yDCuEAA,EA5DH,WAGV,IAAMC,EAAaC,iBAAO,MACpBC,EAAcD,iBAAO,MAC3B,EAA4BE,qBAA5B,mBAAOC,EAAP,KAAeC,EAAf,KACA,EAA0BF,mBAAS,MAAnC,mBAAOG,EAAP,KAAcC,EAAd,KAGMC,EAAS,uCAAG,4BAAAC,EAAA,sEACUC,MADV,OACVC,EADU,OAEhBJ,EAASI,GACTC,QAAQC,IAAI,iBAHI,2CAAH,qDAOTC,EAAc,uCAAG,WAAOC,GAAP,mBAAAN,EAAA,yDACL,KAAZM,EAAEC,OAA0B,OAAVV,EADD,uBAEnBM,QAAQC,IAAI,uBACNI,EAAUjB,EAAWkB,QAAQC,MAC7BC,EAAWlB,EAAYgB,QAAQC,MAJlB,SAMGb,EAAMe,YAAYD,EAAUH,GAN/B,OAMbK,EANa,OAOnBjB,EAAUiB,GACVV,QAAQC,IAAIS,GARO,2CAAH,sDAgBpB,OAHAC,qBAAU,WAAKf,MAAc,IAI3B,qBAAKgB,UAAU,MAAf,SACE,wBAAQA,UAAU,aAAlB,SACW,MAARlB,EACC,gCACE,gDACA,cAAC,IAAD,CACAmB,KAAK,OACLC,MAAM,UACNC,OAAQ,IACRC,MAAO,SAGT,eAAC,IAAMC,SAAP,qBAEE,0BAAUC,IAAK9B,EAAY+B,KAAK,KAAKC,KAAK,QAF5C,iBAIE,uBAAOF,IAAK5B,EAAa+B,WAAYnB,EAAgBoB,KAAK,OAC1D,uBALF,UAOG9B,EAASA,EAAO+B,KAAI,SAACC,EAAKC,GAAN,OAAa,gCAAK,wCAAWA,EAAI,EAAf,SAAL,IAA+BD,EAAIE,KAAnC,KAA2CC,KAAKC,MAAgB,IAAVJ,EAAIK,OAAW,IAArE,UAAoF,WCnDnHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.f2ad420a.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, {useRef, useEffect, useState} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\n// 1. Import dependencies\nimport * as tf from \"@tensorflow/tfjs\";\nimport * as qna from \"@tensorflow-models/qna\";\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\";\nimport Loader from \"react-loader-spinner\";\nimport { Fragment } from 'react';\n\nconst App = () => {\n\n  // 3. Setup references and state hooks\n  const passageRef = useRef(null); \n  const questionRef = useRef(null);\n  const [answer, setAnswer] = useState(); \n  const [model, setModel] = useState(null); \n\n  // 4. Load Tensorflow Model\n  const loadModel = async ()=>{\n    const loadedModel = await qna.load()\n    setModel(loadedModel); \n    console.log('Model loaded.')\n  } \n\n  // 5. Handle Questions\n  const answerQuestion = async (e) =>{\n    if (e.which === 13 && model !== null ){\n      console.log('Question submitted.')\n      const passage = passageRef.current.value\n      const question = questionRef.current.value\n\n      const answers = await model.findAnswers(question, passage)\n      setAnswer(answers); \n      console.log(answers)\n\n    }  \n  }\n\n  useEffect(()=>{loadModel()}, [])\n\n  // 2. Setup input, question and result area\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        {model ==null ? \n          <div>\n            <div>Model Loading</div>      \n            <Loader\n            type=\"Puff\"\n            color=\"#00BFFF\"\n            height={100}\n            width={100}/>\n          </div> \n          :  \n          <React.Fragment>\n            Passage\n            <textarea ref={passageRef} rows=\"30\" cols=\"100\"></textarea>\n            Ask a Question\n            <input ref={questionRef} onKeyPress={answerQuestion} size=\"80\"></input>\n            <br /> \n            Answers\n            {answer ? answer.map((ans, idx) =><div><b>Answer {idx+1} - </b> {ans.text} ({Math.floor(ans.score*100)/100})</div>) : \"\"}\n            </React.Fragment>\n        } \n      </header>\n    </div>\n  );\n}\n\nexport default App","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}